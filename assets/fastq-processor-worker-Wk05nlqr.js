(function(){"use strict";async function u(t){const e=new Uint8Array(await t.slice(0,2).arrayBuffer());return e[0]===31&&e[1]===139}async function*a(t){let e=!1;for(;!e;){const{done:r,value:s}=await t.read();e=r,s&&(yield s)}}async function*c(t){const e=t.stream().pipeThrough(new DecompressionStream("gzip")).pipeThrough(new TextDecoderStream).getReader();yield*a(e)}async function*f(t){const e=t.stream().pipeThrough(new TextDecoderStream).getReader();yield*a(e)}const o=0,i=1,m=2,d=3,p=/^[ACGTN]+$/i,g=/^[\x21-\x7E]+$/;function N(t){const e=t[o],r=t[i],s=t[m],n=t[d];return!e.startsWith("@")||!s.startsWith("+")||s.length>1||r.length<1||n.length<1||r.length!==n.length||!p.test(r)?!1:g.test(n)}const l=/^@(?<instrument>\w+):(?<runNumber>\d+):(?<flowcellId>[A-Za-z0-9-]+):(?<lane>\d+):(?<tile>\d+):(?<xPos>\d+):(?<yPos>\d+)(?::(?<umi>[ATGCN]+\+[ATGCN]+))?\s(?<read>[12]):(?<isFiltered>[YN]):(?<control>\d+):(?<index>([ATGCN]+(?:\+[ATGCN]+)?)|\d+)$/,h=t=>l.test(t),y=t=>{const e=l.exec(t.trim());if(!(e!=null&&e.groups))return null;const r=e.groups;return{instrument:r.instrument,runNumber:Number(r.runNumber),flowcellId:r.flowcellId,lane:Number(r.lane),tile:Number(r.tile),xPos:Number(r.xPos),yPos:Number(r.yPos),umi:r.umi,read:r.read==="2"?2:1,isFiltered:r.isFiltered==="Y",control:Number(r.control),index:r.index}},w=t=>t&&h(t)?"Illumina":"Unknown",E=(t,e)=>{const r=y(e[o]);return r?{file:t,status:"Done",platform:"Illumina",runNumber:r.runNumber,cycles:e[i].length,indexes:r.index}:{file:t,status:"Error",error:"Expected Illumina header",platform:"Unknown"}},I=(t,e)=>({file:t,platform:"Unknown",status:e});self.onmessage=async t=>{const{file:e}=t.data;try{const s=await u(e)?c(e):f(e),n=await x(s);if(!n){self.postMessage({type:"error",fileName:e.name,error:"No reads found"});return}if(!N(n)){self.postMessage({type:"error",fileName:e.name,error:"Invalid read structure"});return}const b=T(e,n),R=A(b);self.postMessage(R)}catch(r){self.postMessage({type:"error",fileName:e.name,error:r.message})}};function A(t){return{type:"result",result:t}}async function x(t){const e=[];for await(const r of t){const s=r.split(`
`).map(n=>n.trim()).filter(Boolean);for(const n of s)if(e.push(n),e.length===4)break;if(e.length===4)break}return e.length===4?e:null}function T(t,e){switch(w(e[o])){case"Illumina":return E(t,e);default:return I(t,"Done")}}})();
